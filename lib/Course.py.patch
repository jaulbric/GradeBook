# Patch generated by Pyment v0.3.3

--- a/Course.py
+++ b/Course.py
@@ -8,7 +8,7 @@
 m = Tools.metadata()
 
 class Course:
-	"""container for course objects"""
+    """container for course objects"""
 	def __init__(self, name):
 		self.name = name
 		self.roster = None
@@ -21,7 +21,17 @@
 		self.grades['Weights'] = []
 
 	def _load(self, name=None):
-		"""load course from repository."""
+		"""load course from repository.
+
+		Parameters
+		----------
+		name :
+		     (Default value = None)
+
+		Returns
+		-------
+
+		"""
 		if name is None:
 			name = self.name
 		
@@ -43,18 +53,38 @@
 
 	def import_roster(self, filename, fieldnames=None, nameformat='onecolumn', idcolumn=None):
 		"""import a .csv or .pickle roster to a course.
-		Parameters:
-		filename	:	Full path to input roster file.
-		fieldnames	:	Fieldnames for input roster. If None the first row of the .csv file is used as fieldnames.
-		nameformat	:	Format for input names.
-		idcolumn	:	Index of column containing ID numbers.
+
+		Parameters
+		----------
+		filename :
+		    Full path to input roster file
+		fieldnames :
+		    Fieldnames for input roster (Default value = None)
+		nameformat :
+		    Format for input names (Default value = 'onecolumn')
+		idcolumn :
+		    Index of column containing ID numbers (Default value = None)
+
+		Returns
+		-------
+
 		"""
 		self.roster = Roster.Roster(filename, fieldnames=fieldnames, nameformat=nameformat, idcolumn=idcolumn, name=self.name)
 		for student in self.roster.studentlist:
 			self.grades['Students'][student['Last Name'], student['First Name']] = {'Scores':[], 'Total':0., 'Weighted Total':0., 'Percent':None, 'Weighted Percent':None}
 
 	def add_roster(self, roster):
-		"""Add an existing roster from the repository"""
+		"""Add an existing roster from the repository
+
+		Parameters
+		----------
+		roster :
+		    
+
+		Returns
+		-------
+
+		"""
 		rfile = os.path.join(m.repository, "rosters", "{0}.pickle".format(roster))
 		if os.path.isfile(rfile):
 			self.roster = Roster.Roster(rfile)
@@ -64,7 +94,25 @@
 			print "roster/{0} does not exist.".format(roster)
 
 	def import_grades(self, name, gfile, points_possible=None, matching=False, weight=1.0):
-		"""import grades from file"""
+		"""import grades from file
+
+		Parameters
+		----------
+		name :
+		    
+		gfile :
+		    
+		points_possible :
+		     (Default value = None)
+		matching :
+		     (Default value = False)
+		weight :
+		     (Default value = 1.0)
+
+		Returns
+		-------
+
+		"""
 
 		self.grades['Entries'].append(name)
 		self.grades['Points Possible'].append(points_possible)
@@ -100,6 +148,17 @@
 			self.grades["Students"][lastname, firstname]["Total"] += score
 	
 	def add_student(self, student):
+		"""
+
+		Parameters
+		----------
+		student :
+		    
+
+		Returns
+		-------
+
+		"""
 		new_student = self.roster.add_student(student)
 		self.grades["Students"][new_student['Last Name'], new_student['First Name']] = {'Scores':[], 'Total':0., 'Weighted Total':0., 'Percent':None, 'Weighted Percent':None}
 		for entry in self.grades["Entries"]:
@@ -107,23 +166,90 @@
 			self.grades["Students"][new_student['Last Name'], new_student['First Name']][entry] = 0.
 
 	def remove_student(self, lastname, firstname):
+		"""
+
+		Parameters
+		----------
+		lastname :
+		    
+		firstname :
+		    
+
+		Returns
+		-------
+
+		"""
 		self.roster.remove_student(lastname, firstname)
 		self.grades["Students"].pop((lastname, firstname))
 
 	def change_grade(self, lastname, firstname, entry, score):
+		"""
+
+		Parameters
+		----------
+		lastname :
+		    
+		firstname :
+		    
+		entry :
+		    
+		score :
+		    
+
+		Returns
+		-------
+
+		"""
 		old_score = self.grades["Students"][lastname, firstname][entry]
 		self.grades["Students"][lastname, firstname][entry] = score
 		self.grades["Students"][lastname, firstname]["Total"] += (score - old_score)
 
 	def change_weight(self, entry, weight):
+		"""
+
+		Parameters
+		----------
+		entry :
+		    
+		weight :
+		    
+
+		Returns
+		-------
+
+		"""
 		idx = self.grades["Entries"].index(entry)
 		self.grades["Weights"][idx] = weight
 
 	def change_points_possible(self, entry, points_possible):
+		"""
+
+		Parameters
+		----------
+		entry :
+		    
+		points_possible :
+		    
+
+		Returns
+		-------
+
+		"""
 		idx = self.grades["Entries"].index(entry)
 		self.grades["Points Possible"][idx] = points_possible
 
 	def remove_entry(self, entry):
+		"""
+
+		Parameters
+		----------
+		entry :
+		    
+
+		Returns
+		-------
+
+		"""
 		idx = self.grades["Entries"].index(entry)
 		self.grades["Entries"].pop(idx)
 		self.grades["Weights"].pop(idx)
@@ -137,6 +263,7 @@
 			self.grades["Students"][lastName, firstName]["Total"] -= score
 
 	def calculate_grades(self):
+		""" """
 		points_possible = np.sum(self.grades["Points Possible"])
 		weighted_points_possible = np.sum(np.array(self.grades["Weights"])*np.array(self.grades["Points Possible"]))
 
