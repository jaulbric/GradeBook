# Patch generated by Pyment v0.3.3

--- a/Roster.py
+++ b/Roster.py
@@ -13,11 +13,12 @@
 m = Tools.metadata()
 
 class RosterLoadError(Exception):
+    """ """
     pass
 
 class Roster():
     def __init__(self, rfile=None, name="default", fieldnames=None, nameformat='onecolumn', idcolumn=None):
-        """Stores class roster with search and name matching methods.
+    """Stores class roster with search and name matching methods.
         Parameter       :   Description
         rfile           :   Full path to input roster file. Can be .csv or .pickle.
         headings        :   (Optional) headings of the roster csv. If None (default) the headings will be taken from the csv file.
@@ -26,7 +27,14 @@
                                 'firstlast': The student's first name is in the first column and their last name is in the second column.
                                 'lastfirst': The student's last name is in the first column and their first name is in the second column.
         idcolumn        :   (Optional) Column number (starting at 0) that contains student ID. This column will become searchable if the value is not None (default).
-        """
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
         self.name = name
         self.roster = None
         self.studentlist = None
@@ -58,11 +66,15 @@
 
         Parameters
         ----------
-        matchfield : str
-            Input string to match.
-        returnmax : int, optional
-            Number of students that will be returned.
-
+        matchfield :
+            
+        returnmax :
+             (Default value = 10)
+
+        Returns
+        -------
+
+        
         """
         return_list = []
         assert isinstance(matchfield,str)
@@ -87,6 +99,21 @@
         lastname    :   Last name of student
         nmax        :   The size of the maximum partition
         nmin        :   The size of the minimum partition
+
+        Parameters
+        ----------
+        lastname :
+            
+        firstname :
+            
+        nmax :
+             (Default value = None)
+        nmin :
+             (Default value = 0)
+
+        Returns
+        -------
+
         """
         match_lastname = []
         match_lastname_score = []
@@ -141,6 +168,7 @@
             return found_lastname, found_firstname
 
     def genSubstringOccurences(self):
+        """ """
         sequences = []
         for student in self.studentlist:
             name = student['Full Name']
@@ -157,6 +185,23 @@
                 sequencewriter.writerow([substring, instances])
 
     def addAlias(self,lastname,firstname,lastnameAlias=None,firstnameAlias=None):
+        """
+
+        Parameters
+        ----------
+        lastname :
+            
+        firstname :
+            
+        lastnameAlias :
+             (Default value = None)
+        firstnameAlias :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if (firstnameAlias is not None) and (lastnameAlias is None):
             self.roster[lastname][firstname]['First Name Alias'].append(firstnameAlias)
             self.aliases[lastname,firstnameAlias] = (lastname, firstname)
@@ -171,6 +216,17 @@
             print 'No alias specified'
 
     def addAliases(self,AliasFile):
+        """
+
+        Parameters
+        ----------
+        AliasFile :
+            
+
+        Returns
+        -------
+
+        """
         with open(AliasFile,'r') as f:
             aliasreader = csv.DictReader(f)
             for row in aliasreader:
@@ -186,6 +242,17 @@
                     self.aliases[row['Last Name Alias'],row['First Name Alias']] = (row['Last Name'], row['First Name'])
 
     def writeCorrections(self,output='corrections.txt'):
+        """
+
+        Parameters
+        ----------
+        output :
+             (Default value = 'corrections.txt')
+
+        Returns
+        -------
+
+        """
         with open(output,'wb') as f:
             writer = csv.writer(f, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
             writer.writerow(['Incorrect Name','Correct Last Name','Correct First Name'])
@@ -193,6 +260,17 @@
                 writer.writerow([' '.join([incorrect[1], incorrect[0]])] + self.newcorrections[incorrect])
 
     def loadCorrections(self,input='corrections.txt'):
+        """
+
+        Parameters
+        ----------
+        input :
+             (Default value = 'corrections.txt')
+
+        Returns
+        -------
+
+        """
         print 'Loading corrections, make sure you have looked over this file before loading. Sometimes the correction algorithm makes mistakes.'
         with open(input,'r') as f:
             reader = csv.DictReader(f)
@@ -201,6 +279,19 @@
                 self.corrections[' '.join(incorrect_name[1:]),incorrect_name[0]] = [row['Correct Last Name'], row['Correct First Name']]
 
     def findID(self,idnum,chatter=2):
+        """
+
+        Parameters
+        ----------
+        idnum :
+            
+        chatter :
+             (Default value = 2)
+
+        Returns
+        -------
+
+        """
         try:
             lname, fname = self.ID[str(idnum)]
             print fname + " " + lname
@@ -211,6 +302,21 @@
             return None
 
     def findAlias(self,lastname,firstname,chatter=2):
+        """
+
+        Parameters
+        ----------
+        lastname :
+            
+        firstname :
+            
+        chatter :
+             (Default value = 2)
+
+        Returns
+        -------
+
+        """
         try:
             lname, fname = self.aliases[lastname,firstname]
             print fname + " " + lname
@@ -221,6 +327,21 @@
             return None
 
     def findCorrection(self,lastname,firstname,chatter=2):
+        """
+
+        Parameters
+        ----------
+        lastname :
+            
+        firstname :
+            
+        chatter :
+             (Default value = 2)
+
+        Returns
+        -------
+
+        """
         try:
             lname, fname = self.corrections[lastname,firstname]
             print fname + " " + lname
@@ -231,11 +352,38 @@
             return None
 
     def _save(self, filename):
-        """Saves the current roster"""
+        """Saves the current roster
+
+        Parameters
+        ----------
+        filename :
+            
+
+        Returns
+        -------
+
+        """
         with open(os.path.join(m.repository, "rosters", "{0}.pickle".format(filename)), 'wb') as f:
             pickle.dump({'name':self.name, 'roster':self.roster, 'studentlist':self.studentlist, 'corrections':self.corrections, 'newcorrections':self.newcorrections, 'aliases':self.aliases, 'ID':self.ID, 'fieldnames':self.fieldnames, 'nameformat':self.nameformat, 'idcolumn':self.idcolumn},f)
 
     def loadCSV(self, filename, fieldnames, nameformat, idcolumn):
+        """
+
+        Parameters
+        ----------
+        filename :
+            
+        fieldnames :
+            
+        nameformat :
+            
+        idcolumn :
+            
+
+        Returns
+        -------
+
+        """
         self.roster = {}
         self.studentlist = []
         self.corrections = {}
@@ -308,6 +456,17 @@
                     self.roster[lastName][student['First Name']] = student
 
     def _loadPickle(self, filename):
+        """
+
+        Parameters
+        ----------
+        filename :
+            
+
+        Returns
+        -------
+
+        """
         with open(os.path.join(m.repository, "rosters", "{0}.pickle".format(filename)), "r") as r:
             load_dict = pickle.load(r)
         self.name = load_dict['name']
@@ -322,6 +481,17 @@
         self.idcolumn = load_dict['idcolumn']
 
     def add_student(self, student):
+        """
+
+        Parameters
+        ----------
+        student :
+            
+
+        Returns
+        -------
+
+        """
         new_student = {}
         for fieldname in self.fieldnames:
             try:
@@ -375,6 +545,19 @@
         return new_student
 
     def remove_student(self, lastname, firstname):
+        """
+
+        Parameters
+        ----------
+        lastname :
+            
+        firstname :
+            
+
+        Returns
+        -------
+
+        """
         student = self.roster[lastname][firstname]
 
         self.studentlist.remove(student)
@@ -383,6 +566,17 @@
             self.roster.pop[lastname]
 
 def partition(names):
+    """
+
+    Parameters
+    ----------
+    names :
+        
+
+    Returns
+    -------
+
+    """
     partitions = []
     if isinstance(names,str):
         names = [[names]]
@@ -396,6 +590,19 @@
     return partitions
 
 def deeppartition(name,n=3):
+    """
+
+    Parameters
+    ----------
+    name :
+        
+    n :
+         (Default value = 3)
+
+    Returns
+    -------
+
+    """
     idx = 1
     partitions = []
     parts = [[name]]
